package me.ewriter.bangumitv.ui.search;import android.app.Activity;import android.content.Intent;import android.support.v4.app.ActivityOptionsCompat;import android.text.TextUtils;import android.view.View;import android.widget.EditText;import com.jakewharton.rxbinding.widget.RxTextView;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;import me.ewriter.bangumitv.api.ApiManager;import me.ewriter.bangumitv.api.entity.SearchItemEntity;import me.ewriter.bangumitv.ui.bangumidetail.BangumiDetailActivity;import me.ewriter.bangumitv.utils.LogUtil;import rx.Observable;import rx.Subscriber;import rx.Subscription;import rx.android.schedulers.AndroidSchedulers;import rx.functions.Action1;import rx.functions.Func1;import rx.schedulers.Schedulers;import rx.subscriptions.CompositeSubscription;/** * Created by Zubin on 2016/9/19. */public class SearchPresenter implements SearchContract.Presenter {    private SearchContract.View mSearchView;    private CompositeSubscription mSubscription;    private String lastKeyWord;    // 把page 参数放在 adapter 里面维护而不是在 activity 中    private int mPage = 1;    public SearchPresenter(SearchContract.View mSearchView) {        this.mSearchView = mSearchView;        mSearchView.setPresenter(this);    }    @Override    public void subscribe() {        mSubscription = new CompositeSubscription();    }    @Override    public void unsubscribe() {        mSubscription.clear();    }    @Override    public void searchItem(final EditText editText, final String type) {        Subscription subscription = RxTextView.textChanges(editText)                .debounce(500, TimeUnit.MILLISECONDS, AndroidSchedulers.mainThread())                .subscribeOn(AndroidSchedulers.mainThread())                .filter(new Func1<CharSequence, Boolean>() {                    @Override                    public Boolean call(CharSequence charSequence) {                        return charSequence.toString().trim().length() > 0;                    }                })                .observeOn(AndroidSchedulers.mainThread())                .doOnNext(new Action1<CharSequence>() {                    @Override                    public void call(CharSequence charSequence) {                        LogUtil.d(LogUtil.ZUBIN, "searchPresenter doOnNext");                        if (mPage == 1) {                            mSearchView.showLoading();                        }                        if (!charSequence.toString().trim().equals(lastKeyWord)) {                            mSearchView.clearData();                            mPage = 1;                            unsubscribe();                            searchItem(editText, type);                        }                        lastKeyWord = charSequence.toString().trim();                    }                })                .observeOn(Schedulers.io())                .flatMap(new Func1<CharSequence, Observable<String>>() {                    @Override                    public Observable<String> call(CharSequence charSequence) {                        return ApiManager.getWebInstance().searchItem(charSequence.toString(),                                type, mPage);                    }                })                .subscribeOn(Schedulers.io())                .map(new Func1<String, List<SearchItemEntity>>() {                    @Override                    public List<SearchItemEntity> call(String s) {                        return parseHtml(s);                    }                })                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Subscriber<List<SearchItemEntity>>() {                    @Override                    public void onCompleted() {                        LogUtil.d(LogUtil.ZUBIN, "SearchItem onCompleted");                    }                    @Override                    public void onError(Throwable e) {                        LogUtil.d(LogUtil.ZUBIN, "SearchItem onError :" + e.getMessage());                        mSearchView.hideLoading();                        mSearchView.showOnError();                    }                    @Override                    public void onNext(List<SearchItemEntity> searchItemEntities) {                        LogUtil.d(LogUtil.ZUBIN, "SearchItem onNext");                        mSearchView.refreshList(searchItemEntities);                        mSearchView.hideLoading();                        mPage++;                    }                });        mSubscription.add(subscription);    }    @Override    public void searchPerson(String keyword, String type, int page) {    }    @Override    public void openBangumiDetail(Activity activity, View view, SearchItemEntity entity) {        Intent intent = new Intent(activity, BangumiDetailActivity.class);        intent.putExtra("bangumiId", entity.getBangumiId());        intent.putExtra("name", !TextUtils.isEmpty(entity.getNormalName()) ? entity.getNormalName() : entity.getSmallName());        intent.putExtra("common_url", entity.getCoverImageUrl());        intent.putExtra("large_url", entity.getLargeImageUrl());        activity.startActivity(intent, ActivityOptionsCompat.makeSceneTransitionAnimation(activity, view, "img").toBundle());    }    private List<SearchItemEntity> parseHtml(String html) {        Document doc = Jsoup.parse(html);        Elements div = doc.select("div.column");        Elements li = div.select("ul#browserItemList>li");//        Elements page = div.select("div#multipage>div.page_inner>a");        List<SearchItemEntity> mList = new ArrayList<>();        for (int i = 0; i < li.size(); i++) {            SearchItemEntity entity = new SearchItemEntity();            Element element = li.get(i);            String link = "http://bgm.tv" + element.select("a").attr("href");            String bangumiId = element.select("a").attr("href").replace("/subject/", "").trim();            String imageUrl = "https:" + element.select("a>span>img").attr("src");            String coverImageUrl = imageUrl.replace("/s/", "/c/");            String largeImageUrl = imageUrl.replace("/s/", "/l/");            String noramlName = element.select("div>h3>a").text();            String smallName = element.select("div>h3>small").text();            String info = element.select("div>p.info").text();            String rateNumber = element.select("div>p.rateInfo>small").text();            String rateTotal = element.select("div>p.rateInfo>span.tip_j").text();            // 不是每个item 都有 rank 这个参数            String rank = element.select("div>span.rank").text();            String type = "";            String typeName = "";            String type_class = element.select("div>h3>span").attr("class");            if (type_class.equals("ico_subject_type subject_type_1 ll")) {                // 图书                type = "1";                typeName = "图书";            } else if (type_class.equals("ico_subject_type subject_type_2 ll")) {                // 视频                type = "2";                typeName = "视频";            } else if (type_class.equals("ico_subject_type subject_type_3 ll")) {                // 音乐                type = "3";                typeName = "音乐";            } else if (type_class.equals("ico_subject_type subject_type_4 ll")) {                // 游戏                type = "4";                typeName = "游戏";            } else if (type_class.equals("ico_subject_type subject_type_4 ll")) {                // 三次元                type = "6";                typeName = "三次元";            } else {                type = "-1";                typeName = "???";            }            entity.setLinkUrl(link);            entity.setImageUrl(imageUrl);            entity.setCoverImageUrl(coverImageUrl);            entity.setLargeImageUrl(largeImageUrl);            entity.setNormalName(noramlName);            entity.setSmallName(smallName);            entity.setInfo(info);            entity.setRateNumber(rateNumber);            entity.setRateTotal(rateTotal);            entity.setRank(rank);            entity.setType(type);            entity.setTypeName(typeName);            entity.setBangumiId(bangumiId);            mList.add(entity);        }        return mList;    }}